---
version: "3.3"

services:
  bar:
    image: mhart/alpine-node
    hostname: "{{.Service.Name}}-{{.Task.Slot}}-{{.Node.ID}}"
    environment:
      NODE_ID: "{{.Node.ID}}"
      NODE_HOSTNAME: "{{.Node.Hostname}}"
      SERVICE_ID: "{{.Service.ID}}"
      SERVICE_NAME: "{{.Service.Name}}"
      SERVICE_LABELS: "{{js .Service.Labels}}"
      SERVICE_DNSPEERS: "tasks.{{.Service.Name}}"
      TASK_ID: "{{.Task.ID}}"
      TASK_NAME: "{{.Task.Name}}"
      TASK_SLOT: "{{.Task.Slot}}"
    command: ['node', '-e', 'require("http").createServer((req,res) => {res.end([[req.method, req.httpVersion, req.url],["On host:", require("os").hostname()],["NODE_ID",           process.env.NODE_ID],["NODE_HOSTNAME",     process.env.NODE_HOSTNAME],["SERVICE_ID",        process.env.SERVICE_ID],["SERVICE_NAME",      process.env.SERVICE_NAME],["SERVICE_LABELS",    process.env.SERVICE_LABELS],["SERVICE_DNSPEERS",  process.env.SERVICE_DNSPEERS],["TASK_ID",           process.env.TASK_ID],["TASK_NAME",         process.env.TASK_NAME],["TASK_SLOT",         process.env.TASK_SLOT], []].map(l=>l.join(" ")).join("\n"))}).listen(3001, "0.0.0.0", ()=> {})']
    labels:
      gg.dq.desscription: "healthcheck"
    ports:
      - 3001:3001
    deploy:
      replicas: 20
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s

---
version: "3.7"


x-node-env:
  &global_env
  DEPLOYED_ENVIRONMENT: dev
  NODE_ID: "{{.Node.ID}}"
  NODE_HOSTNAME: "{{.Node.Hostname}}"
  SERVICE_ID: "{{.Service.ID}}"
  SERVICE_NAME: "{{.Service.Name}}"
  SERVICE_LABELS: "{{js .Service.Labels}}"
  SERVICE_DNSPEERS: "tasks.{{.Service.Name}}"
  STACK_IMAGE: '{{index .Service.Labels "com.docker.stack.image"}}'
  STACK_NAMESPACE: '{{index .Service.Labels "com.docker.stack.namespace"}}'
  TASK_ID: "{{.Task.ID}}"
  TASK_NAME: "{{.Task.Name}}"
  TASK_SLOT: "{{.Task.Slot}}"


services:

#NOTE: simple OK echo for now, on any machine in swarm.
  healthcheck:
    image: davequick/image:healthcheck
    labels:
      gg.dq.desscription: "healthcheck"
    ports:
      - 6970:8080
    networks:
      - bridge
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
      endpoint_mode: vip
      restart_policy:
        condition: any
        delay: 60s
        window: 120s

  consul:
    image: consul
    hostname: '{{index .Service.Labels "com.docker.stack.namespace"}}-{{index .Service.Labels "com.docker.stack.image"}}-{{.Task.Slot}}'
    labels:
      gg.dq.description: "consul"
    environment:
      <<: *global_env
      CONSUL_LOCAL_CONFIG: '{ "datacenter":"docker-cluster", "enable_debug":true, "leave_on_terminate": true, "skip_leave_on_interrupt": false }'
    command: ["agent","-retry-join=tasks.consul", "-ui", "-server=true", "-bootstrap-expect=3"]
    networks:
      - backend
    deploy:
      mode: replicated
      replicas: 3

#NOTE: Provide a means of accessing backend UIs of apps internal to me.  Available on port 2222, use as ssh proxy.
  bastion:
    image: davequick/image:bastion
    labels:
      gg.dq.description: "bastion"
    environment:
      <<: *global_env
    networks:
      - backend
    dns:
      - 8.8.8.8
    ports:
      - "2222:22"
    deploy:
      mode: replicated
      replicas: 1

#NOTE: reverse proxy tied into all deploying containers.  meant to ensure there is a means of reaching containers that
#      publish http/https by host header - reads labels off of docker containers deployed.
  traefik:
    image: traefik
    command: --api --docker # listen to docker, also expose UI on 8080 which only available on "backend" bastion
    environment:
      <<: *global_env
    ports:
      - "80:80"     # The HTTP port
      - "443:443"     # The HTTPS port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    networks:
      - backend





networks:
  backend:
    external: true
    driver: overlay
    attachable: true
  bridge:
    external: true
    driver: bridge


#    deploy:
#      mode: replicated
#      replicas: 3
  #      endpoint_mode: vip
  #      restart_policy:
  #        condition: any
  #        delay: 60s
  #        window: 120s
  #      update_config:
  #        parallelism: 1
  #        delay: 60s
  #        monitor: 30s
  #        order: stop-first
  #        failure_action: rollback
  #      placement:
  #        constraints:
  #          - node.role == worker
  #        preferences:
  #          - spread: node.labels.gg.dq.availability_zone
  #  -client 0.0.0.0 â€“ Consul should listen on all interfaces. It defaults to localhost only by default.


#  registrator:
#    image: gliderlabs/registrator
#    environment:
#      <<: *global_env
#    command: consul://tasks.consul:8500
#    volumes:dock
#      - /var/run/docker.sock:/tmp/docker.sock
#    networks:
#      - bridge
#      - backend

#
#  zookeeper:
#    image: davequick/image:zookeeper
#    labels:
#      gg.dq.description: "zookeeper"
#    environment:
#      <<: *global_env
#    depends_on:
#      - consul
#    networks:
#      - backend
#
#  kafka:
#    image: davequick/image:kafka
#    labels:
#      gg.dq.description: "kafka"
#    environment:
#      <<: *global_env
#    depends_on:
#      - consul
#      - zookeeper
#    networks:
#      - backend
#



# https://github.com/MykhayloLohvynenko/mentee
#  elasticsearch:
#    image: davequick/image:elasticsearch
#    labels:
#      gg.dq.description: "elasticsearch"
#    environment:
#      <<: *global_env
#      ES_JAVA_OPTS: '-Xms256m -Xmx256m'
#      xpack.security.enabled: 'false'
#      xpack.monitoring.enabled: 'false'
#      xpack.graph.enabled: 'false'
#      xpack.watcher.enabled: 'false'
#    depends_on:
#      - consul
#    networks:
#      - backend
#    deploy:
#      placement:
#        constraints:
#          - node.role == worker

#    deploy:
#      replicas: 1
#      placement:
#        constraints:
#          - node.hostname == agent1



#  kibana:
#    image: davequick/image:kibana
#    labels:
#      gg.dq.description: "kibana"
#    environment:
#      <<: *global_env
#    depends_on:
#      - consul
#      - elasticsearch
#    networks:
#      - backend
#
#  logstash:
#    image: davequick/image:logstash
#    labels:
#      gg.dq.description: "logstash"
#    environment:
#      <<: *global_env
#    depends_on:
#      - consul
#      - kafka
#      - elasticsearch
#    networks:
#      - backend
#
#  cassandra:
#    image: davequick/image:logstash
#    labels:
#      gg.dq.description: "cassandra"
#    environment:
#      <<: *global_env
#    depends_on:
#      - consul
#    networks:
#      - backend
#
#  redis:
#    image: davequick/image:redis
#    labels:
#      gg.dq.description: "redis"
#    environment:
#      <<: *global_env
#    depends_on:
#      - consul
#    networks:
#      - backend
#
#  krakend:
#    image: davequick/image:krakend#
#    labels:
#      gg.dq.description: "krakend"
#    environment:
#      <<: *global_env
#    depends_on:
#      - consul
#    networks:
#      - backend
#
#
#  mongodb:
#    image: davequick/image:mongodb
#    labels:
#      gg.dq.description: "mongodb"
#    environment:
#      <<: *global_env
#    depends_on:
#      - consul
#    networks:
#      - backend
#





















#
#
#
#
#
#version: '2'
#services:
#  my-traefik:
#    image: traefik
#    command: -c /dev/null --web --docker --docker.domain=dck.mojserver.mk
#    labels:
#      - "traefik.enable=false"
#    ports:
#      - "80:80"
#      - "8080:8080"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#
#  131513-eureka:
#    image: 131513/soa-eureka
#    labels:
#      - "traefik.port=8761"
#      - "traefik.backend=131513-eureka"
#      - "traefik.frontend.rule=PathPrefixStrip:/131513-eureka"
#    expose:
#      - "8761"
#    ports:
#      - "8761:8761"
#
#  131513-zuul:
#    image: 131513/soa-zuul
#    labels:
#      - "traefik.port=8080"
#      - "traefik.backend=131513-zuul"
#      - "traefik.frontend.rule=PathPrefixStrip:/131513-zuul"
#
#  131513-gateway:
#    image: 131513/soa-gateway
#    labels:
#      - "traefik.port=8080"
#      - "traefik.backend=131513-gateway"
#      - "traefik.frontend.rule=PathPrefixStrip:/131513-gateway"
#
#  131513-mysql:
#    image: mysql
#    environment:
#      MYSQL_ROOT_PASSWORD:
#      MYSQL_USER: root
#      MYSQL_PASSWORD: databasepass!
#      MYSQL_DATABASE: iknow_db
#    volumes:
#      - 131513-datavolume:/var/lib/mysql
#    labels:
#      - "traefik.enable=false"
#
#  auth-service:
#    image: 131513/auth-service
#    labels:
#      - "traefik.port=8080"
#      - "traefik.backend=auth-service"
#      - "traefik.frontend.rule=PathPrefixStrip:/auth-service"
#    links:
#      - 131513-mysql
#      - 131513-eureka
#      - 131513-zuul
#      - 131513-gateway
#    depends_on:
#      - 131513-mysql
#      - 131513-traefik
#      - 131513-eureka
#      - 131513-zuul
#      - 131513-gateway
#
#  studentdossier-service:
#    image: 131513/studentdossier-service
#    labels:
#      - "traefik.port=8080"
#      - "traefik.backend=studentdossier-service"
#      - "traefik.frontend.rule=PathPrefixStrip:/studentdossier-service"
#    links:
#      - 131513-mysql
#      - 131513-eureka
#      - 131513-zuul
#      - 131513-gateway
#    depends_on:
#      - 131513-mysql
#      - 131513-traefik
#      - 131513-eureka
#      - 131513-zuul
#      - 131513-gateway
#
#  studentservice-service:
#    image: 131513/studentservice-service
#    labels:
#      - "traefik.port=8080"
#      - "traefik.backend=studentservice-service"
#      - "traefik.frontend.rule=PathPrefixStrip:/studentservice-service"
#    links:
#      - 131513-mysql
#      - 131513-eureka
#      - 131513-zuul
#      - 131513-gateway
#    depends_on:
#      - 131513-mysql
#      - 131513-traefik
#      - 131513-eureka
#      - 131513-zuul
#      - 131513-gateway
#
#  subject-service:
#    image: 131513/subject-service
#    labels:
#      - "traefik.port=8080"
#      - "traefik.backend=subject-service"
#      - "traefik.frontend.rule=PathPrefixStrip:/subject-service"
#    links:
#      - 131513-mysql
#      - 131513-eureka
#      - 131513-zuul
#      - 131513-gateway
#    depends_on:
#      - 131513-mysql
#      - 131513-traefik
#      - 131513-eureka
#      - 131513-zuul
#      - 131513-gateway
#
#volumes:
#  131513-datavolume: {}

#services:
#  traefik:
#    build: .
#    command: --web --web.metrics.prometheus --web.metrics.prometheus.buckets="0.1,0.3,1.2,5.0" --docker --docker.domain=docker.localhost --logLevel=DEBUG
#    ports:
#      - "80:80"
#      - "443:443"
#      - "8080:8080"
#    restart: always
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - reverseproxy
#      - prometheus
#    cap_drop:
#      - all
#    cap_add:
#      - net_bind_service
#    labels:
#      - "traefik.port=8080"
#      - "traefik.enable=true"
#      - "traefik.backend=traefik"
#      - "traefik.frontend.rule=Host:traefik.${DOMAIN_NAME}"
#
#networks:
#  reverseproxy:
#    driver: bridge
#  prometheus:
#    external:
#      name: prometheus_back-tier
#
# example stack of a cluster-wide load balancer
#version: '3.1'
#
#services:
#  # traefik uses service labels to dynamically configure routes
#  traefik:
#    image: traefik
#    command:
#      - --web
#      - --docker
#      - --docker.swarmmode
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    deploy:
#      placement:
#        constraints:
#          - node.role == manager
#    ports:
#      - 80:80
#      - 8080:8080
#    networks:
#      - proxy
#
#networks:
#  proxy:

#hostname: 'couchdb-{{.Task.Slot}}.{{index .Service.Labels "com.docker.stack.namespace"}}'
#x-media-cfg:
#  &kz-media
#  - type: bind
#    source: ../../../../dev
#    target: /opt/kazoo
#    read_only: true
#  - type: bind
#    source: ./config.ini
#    target: /etc/kazoo/config.ini
#    read_only: true
#  - type: bind
#    source: ../media-files/kazoo
#    target: /media-files
#    read_only: true
#
#    volumes: *kz-media

#x-devnode-cfg:
#  &kz-dev
#  - type: bind
#    source: ../../../../dev
#    target: /opt/kazoo
#    read_only: false
#  - type: bind
#    source: ./config.ini
#    target: /etc/kazoo/config.ini
#    read_only: true
#    volumes: *kz-dev

#    - TELEGRAF_DEBUG=$TELEGRAF_DEBUG
#      - TELEGRAF_QUIET=$TELEGRAF_QUIET
#      - TELEGRAF_INTERVAL=$TELEGRAF_INTERVAL
#      - TELEGRAF_INPUT_TIMEOUT=$TELEGRAF_INPUT_TIMEOUT
#      # Specific
#      - TELEGRAF_DEPENDS_ON=${CASSANDRA_MAIN_NAME}
#      - WAIT_FOR=${INFLUXDB_NAME}
#      - CASSANDRA_MAIN_URL=${CASSANDRA_MAIN_NAME}
#      - CASSANDRA_COUNT_PORT=${CASSANDRA_COUNT_PORT}
#      command: telegraf --output-filter ${TELEGRAF_OUTPUT_FILTER} -config /etc/telegraf/cassandra_count.conf

#           if [ "$(docker inspect -f "{{.State.Health.Status}}" pihole)" == "healthy" ] ; then
#           printf ' OK'
#           echo -e "\n$(docker logs pihole 2> /dev/null | grep 'password:') for your pi-hole: https://${IP}/admin/"
#           exit 0
#           else
#           sleep 3
#           printf '.'
#           fi



#  for service in $(docker service ls -q); do
#  docker service inspect --format \
#  '{{.Spec.Name}}: {{range .Endpoint.VirtualIPs}}{{.Addr}} {{end}}' \
#  ${service}
#  done


#There are 2 places to set labels in compose file, for container:
#
#services:
#  foo:
#    labels:
#      xxx: xxx
#and for service:
#
#services:
#  foo:
#    deploy:
#      labels:
#        xxx: xxx
